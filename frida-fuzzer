#!/usr/bin/env python3
"""

   frida-fuzzer - fuzzer driver
   ----------------------------

   Written and maintained by Andrea Fioraldi <andreafioraldi@gmail.com>
   Based on American Fuzzy Lop by Michal Zalewski

   Copyright 2019 Andrea Fioraldi. All rights reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at:

     http://www.apache.org/licenses/LICENSE-2.0

"""

__version__ = "1.1"

import frida
import base64
import time
import os
import sys
import time
import signal
import argparse
import tempfile
import random

SPLICE_CYCLES = 15 # warning: must be consistent wiht config.js! 

UNINFORMED_SEED = b"0" * 4

DESCR = """Frida Android API Fuzzer [%s]
Copyright (C) 2019 Andrea Fioraldi <andreafioraldi@gmail.com>
""" % __version__

opt = argparse.ArgumentParser(description=DESCR, formatter_class=argparse.RawTextHelpFormatter)
opt.add_argument("-i", action="store", help="Folder with initial seeds")
opt.add_argument("-o", action="store", help="Output folder with intermediate seeds and crashes")
opt.add_argument("-U", action="store_true", help="Connect to USB")
opt.add_argument("-spawn", action="store_true", help="Spawn instead of attach")
opt.add_argument("-script", action="store", default="fuzzer-agent.js", help="Script filename (default is fuzzer-agent.js)")
opt.add_argument('target', nargs=argparse.REMAINDER, help="Target program/pid (and arguments if spwaning)")

args = opt.parse_args()

if len(args.target) == 0:
    print (" >> Target not specified!")
    exit (1)

if args.o is None:
    output_folder = tempfile.mkdtemp(prefix="frida_fuzz_out_")
    print (" >> Temporary output folder :", output_folder)
else:
    output_folder = args.o
    if os.path.exists(output_folder):
        print (" >> %s already exists!" % output_folder)
        exit (1)
    os.mkdir(output_folder)

if args.i and not os.path.exists(args.i):
    print (" >> %s doesn't exists!")
    exit (1)

app_name = args.target[0]
try:
    app_name = int(app_name)
    pid = app_name
except:
    pass # not a PID

with open(args.script) as f:
    code = f.read()

if args.U:
    device = frida.get_usb_device()
    if args.spawn:
        pid = device.spawn(args.target)
        session = device.attach(pid)
    else:
        session = device.attach(app_name)
else:
    if args.spawn:
        if os.getenv("FRIDA_FUZZER_CHILD_OUT"):
            pid = frida.spawn(args.target)
        else:
            pid = frida.spawn(args.target, stdio="pipe")
        session = frida.attach(pid)
    else:
        session = frida.attach(app_name)

script = session.create_script(code, runtime="v8")

def locate_diffs(a, b):
    f_loc = None
    l_loc = None
    for i in range(min(len(a), len(b))):
        if a[i] != b[i]:
            if f_loc is None: f_loc = i
            l_loc = i
    return f_loc, l_loc

class QEntry(object):
    def __init__(self):
        self.filename = ""
        self.size = 0
        self.num = 0
        self.was_fuzzed = False
        self.exec_us = 0
        self.time = 0
        self.new_cov = False
        self.next = None

class Queue(object):
    def __init__(self):
        self.size = 0
        self.start = None
        self.cur = None
        self.top = None

    def add(self, buf, exec_us, new_cov, stage):
        q = QEntry()
        q.filename = os.path.join(output_folder, "id_%d_%s" % (self.size, stage))
        if new_cov:
            q.filename += "_cov"
        q.num = self.size
        q.exec_us = exec_us
        q.new_cov = new_cov
        q.time = int(time.time())
        q.size = len(buf)
        with open(q.filename, "wb") as f:
            f.write(buf)
        self.size += 1
        if self.top:
            self.top.next = q
            self.top = q
        else:
            self.start = q
            self.top = q
    
    def get(self):
        if self.cur is None:
            self.cur = self.start
        elif self.cur.next is None:
            self.cur = self.start
        else:
            q = self.cur.next
            self.cur = q
        return self.cur
    
    def find_by_num(self, num):
        q = self.start
        while q is not None:
            if q.num == num:
                return q
            q = q.next
        return None
    
    def get_splice_target(self, q, buf):
        tid = random.randint(0, self.size -1)
        t = self.find_by_num(tid)
        while t is not None and (t.size < 2 or t.num == q.num):
            t = t.next
        if t is None:
            return None
        with open(t.filename, "rb") as f:
            new_buf = f.read()
        f_diff, l_diff = locate_diffs(buf, new_buf)
        if f_diff is None or l_diff < 2 or f_diff == l_diff:
            return None
        split_at = random.randint(f_diff, l_diff -1)
        return buf[:split_at] + new_buf[split_at:]
        

queue = Queue()
start_time = 0
last_path = 0

def readable_time(t):
    h = t // 60 // 60
    m = t // 60 - h * 60
    s = t - m * 60 - h * 60 * 60
    return "%dh-%dm-%ds" % (h, m, s)

def status_screen(status):
    global queue, app_name
    #return
    t = time.time()
    TERM_HOME = "\x1b[H"
    TERM_CLEAR = TERM_HOME + "\x1b[2J"
    FUZZER_NAME = "frida-fuzzer"
    bl = max(len(str(app_name)), len(output_folder), 20)
    bl = len("target app       : ") + bl - len("=[ %s ]=" % FUZZER_NAME)
    bl = bl // 2 if bl % 2 == 0 else (bl +1) // 2
    sb = " |=" + "-"*bl + ("=[ %s ]=" % FUZZER_NAME) + "-"*bl + "=|"
    print (TERM_CLEAR)
    print (sb)
    print ("   target app       :", app_name)
    print ("   output folder    :", output_folder)
    print ("   uptime           :", readable_time(t - start_time))
    print ("   last path        :", readable_time(last_path - start_time))
    print ("   queue size       :", queue.size)
    print ("   last stage       :", status["stage"])
    print ("   current testcase :", "<init>" if queue.cur is None else os.path.basename(queue.cur.filename))
    print ("   total executions :", status["total_execs"])
    print ("   execution speed  : %d/sec" % (status["total_execs"] / (t - start_time)))
    print (" |=" + "-"*(len(sb) -5) + "=|\n")


def on_interesting(message, data):
    global queue, last_path
    exec_us = message["exec_us"]
    new_cov = message["new_cov"]
    stage = message["stage"]
    last_path = time.time()
    queue.add(data, exec_us, new_cov, stage)

def on_next(message, data):
    global queue
    q = queue.get()
    with open(q.filename, "rb") as f:
        buf = f.read()
    script.post({
      "type": "input",
      "num": q.num,
      "buf": buf.hex(),
      "was_fuzzed": q.was_fuzzed,
    })

def on_splice(message, data):
    global queue
    num = message["num"]
    splice_cycle = message["cycle"]
    q = queue.find_by_num(num)
    with open(q.filename, "rb") as f:
        buf = f.read()
    new_buf = None
    while splice_cycle < SPLICE_CYCLES:
        splice_cycle += 1
        new_buf = queue.get_splice_target(q, buf)
        if new_buf is not None:
            break
    if new_buf is None:
        script.post({
          "type": "splice",
          "buf": None, # failed
        })
    else:
        script.post({
          "type": "splice",
          "buf": new_buf.hex(),
          "cycle": splice_cycle,
        })

def on_crash(message, data):
    global queue, script, session
    print ("\n"*2 + "  ************** CRASH FOUND! **************")
    print ("    type:", message["err"]["type"])
    if "memory" in message["err"]:
        print ("    %s at:" % message["err"]["memory"]["operation"], message["err"]["memory"]["address"])
    print ("")
    t = int(time.time())
    name = os.path.join(output_folder, "crash_%s_%s_%d" % (message["stage"], message["err"]["type"], t))
    #name = os.path.join(output_folder, "crash_%d" % t)
    print (" >> Saving at %s" % repr(name))
    with open(name, "wb") as f:
        f.write(data)
    print (" >> Press Control-C to exit...")
    script.unload()
    session.detach()

def on_exception(message, data):
    global queue, script, session
    print ("\n"*2 + "  ************ EXCEPTION FOUND! ************")
    print ("    message:", message["err"])
    print ("")
    t = int(time.time())
    name = os.path.join(output_folder, "exception_%s_%d" % (message["stage"], t))
    #name = os.path.join(output_folder, "crash_%d" % t)
    print (" >> Saving at %s" % repr(name))
    with open(name, "wb") as f:
        f.write(data)
    print (" >> Press Control-C to exit...")
    script.unload()
    session.detach()

def on_stats(message, data):
    status_screen(message)

def on_message(message, data):
    if message["type"] == "error":
        print (" ************** FUZZER ERROR! **************")
        if "lineNumber" in message:
            print ("  line %d: %s" % (message["lineNumber"], message["description"]))
        else:
            print ("  %s" % message["description"])
        if "stack" in message:
            print ("  JS stacktrace:\n")
            print (message["stack"])
        print ("")
        print (" >> Press Control-C to exit...")
        script.unload()
        session.detach()
    msg = message["payload"]
    if msg["event"] == "interesting":
        on_interesting(msg, data)
        on_stats(msg, data)
    elif msg["event"] == "next":
        on_next(msg, data)
        on_stats(msg, data)
    elif msg["event"] == "splice":
        on_splice(msg, data)
        on_stats(msg, data)
    elif msg["event"] == "crash":
        on_crash(msg, data)
    elif msg["event"] == "exception":
        on_exception(msg, data)
    elif msg["event"] == "stats":
        on_stats(msg, data)

script.on('message', on_message)
script.load()

def signal_handler(sig, frame):
    print (" >> Exiting...")
    try:
        script.unload()
        session.detach()
    except: pass
    os._exit (0)
signal.signal(signal.SIGINT, signal_handler)

start_time = int(time.time())

last_path = start_time

if args.i is None:
    queue.add(UNINFORMED_SEED, 0, True, "init")
else:
    for fname in os.listdir(args.i):
        p = os.path.join(args.i, fname)
        if not os.path.isfile(p): continue
        with open(p, "rb") as f:
            queue.add(f.read(), 0, True, "init")

try:
    script.exports.loop()
except frida.InvalidOperationError as e:
    print (e)
    exit (1)

sys.stdin.read()

